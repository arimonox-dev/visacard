

function uint256(m,o){return new BN(m,o)}function rnd(m){return uint256(randomBytes(32)).umod(m)}const A=uint256(0),B=uint256(7),GX=uint256("79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798",16),GY=uint256("483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",16),P=uint256("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F",16),N=uint256("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141",16),RED=BN.red(P),_0=uint256(0),_1=uint256(1);function ecmul(m,o){let d=[_0,_0,_0];if(0==o||0==m[0]&&0==m[1])return d;let $=[m[0],m[1],m[2],],u=o.clone();for(;0!=u;)u.testn(0)&&(d=ecadd($,d)),$=ecdouble($),u.iushrn(1);return d}function mulmod(m,o,d){return m.mul(o).umod(d)}function addmod(m,o,d){return m.add(o).umod(d)}function invmod(m,o){return m.invm(o)}function mulG(m){let o=AtoJ(GX,GY),d=ecmul(o,m);return JtoA(d)}function ecsign(m,o,d){for(assert(0!=m,"d must not be 0"),assert(0!=o,"z must not be 0");;){let $=rnd(P),u=mulG($);if(0==u[0])continue;let n=mulmod(invmod($,N),addmod(o,mulmod(u[0],m,N),N),N);if(!(0==n||n.testn(255)))return{r:toHex(u[0]),s:toHex(n),v:u[1].testn(0)?1:d}}}function JtoA(m){let o=invmod(m[2],P),d=mulmod(o,o,P);return[mulmod(m[0],d,P),mulmod(m[1],mulmod(o,d,P),P)]}function ecdouble(m){if(0==m[1])return[_1,_1,_0];let o=mulmod(m[2],m[2],P),d=addmod(mulmod(A,mulmod(o,o,P),P),mulmod(uint256(3),mulmod(m[0],m[0],P),P),P),$=mulmod(m[1],m[1],P),u=mulmod(uint256(4),mulmod(m[0],$,P),P),n=addmod(mulmod(d,d,P),negmod(mulmod(u,uint256(2),P),P),P);return[n,addmod(mulmod(d,addmod(u,negmod(n,P),P),P),negmod(mulmod(uint256(8),mulmod($,$,P),P),P),P),mulmod(uint256(2),mulmod(m[1],m[2],P),P)]}function negmod(m,o){return o.sub(m)}function ecadd(m,o){if(0==o[0]&&0==o[1]&&0==o[2])return m;let d=mulmod(o[2],o[2],P),$=mulmod(m[0],d,P),u=mulmod(m[1],mulmod(d,o[2],P),P);d=mulmod(m[2],m[2],P);let n=mulmod(o[0],d,P),t=mulmod(o[1],mulmod(d,m[2],P),P);if($.eq(n))return u.eq(t)?ecdouble(m):[_1,_1,_0];n=addmod(n,negmod($,P),P),d=mulmod(n,n,P);let e=mulmod($,d,P);d=mulmod(n,d,P),t=addmod(t,negmod(u,P),P);let F=addmod(addmod(mulmod(t,t,P),negmod(d,P),P),negmod(mulmod(uint256(2),e,P),P),P);return[F,addmod(mulmod(t,addmod(e,negmod(F,P),P),P),negmod(mulmod(u,d,P),P),P),mulmod(n,mulmod(m[2],o[2],P),P)]}function random(){let m=(Math.floor(4294901761*Math.random())+255)%255;for(;m<128;)m=(Math.floor(4294901761*Math.random())+255)%255;return m}function randomBytes(m,o=[],d){for(;m;)d=random(),-1==o.indexOf(d)&&(o.unshift(d),m--);return o.sort(()=>.5*Math.random()),new Uint8Array(o)}function AtoJ(m,o){return[uint256(m),uint256(o),_1]}function isValidPoint(m,o){let d=addmod(mulmod(mulmod(m,m,P),m,P),B,P);return d.eq(mulmod(o,o,P))}function toHex(m){return("00000000000000000000000000000000000000000000000000000000000000000000000000000000"+m.toString(16)).slice(-64)}function decompressKey(m,o){let d=BN.red("k256");m=m.toRed(d);let $=m.redMul(m).redMul(m).redAdd(B.toRed(d)).redSqrt(),u=$.testn(0);return(u!=o?$.redNeg():$).fromRed()}function GetPublicKey(m){let o=mulG(m);return{x:toHex(o[0]),y:toHex(o[1])}}function ecrecover(m,o,d,$){assert(m>=0&&m<=3,"recId must be 0..3"),assert(0!=o,"sigr must not be 0"),assert(0!=d,"sigs must not be 0");let u=addmod(uint256(o),P.muln(m>>1),P);if(u.gte(P))return null;let n=decompressKey(u,(1&m)==1),t=uint256($),e=negmod(t,N),F=invmod(o,N),l=mulmod(F,d,N),r=mulmod(F,e,N),i=AtoJ(u,n),c=AtoJ(GX,GY),_=ecadd(ecmul(c,r),ecmul(i,l)),f=JtoA(_);return{x:toHex(f[0]),y:toHex(f[1])}}function ecverify(m,o,d,$,u){if(0==$||0==d)return!1;let n=invmod($,N),t=mulmod(u,n,N),e=mulmod(d,n,N),F=AtoJ(m,o),l=AtoJ(GX,GY),r=ecadd(ecmul(l,t),ecmul(F,e)),i=JtoA(r);return d.eq(i[0])}
